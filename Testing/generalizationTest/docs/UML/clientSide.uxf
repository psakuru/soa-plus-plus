<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="11.2">
  <help_text>// Uncomment the following line to change the fontsize and font:
// fontsize=14
 fontfamily=Monospaced //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>10</x>
      <y>30</y>
      <w>440</w>
      <h>410</h>
    </coordinates>
    <panel_attributes>/ServiceProxy/
--
-inputParameters: ParameterList
-outputParameters: ParameterList
-serviceId: string
-serviceRegistryAddress: string
-serviceProviderAddress: string
-socket: TcpIpActiveSocket
--
+ServiceProxy(serviceId: string, serviceRegistryAddress: string)
+getServiceRegistryAddress(): string
+setServiceRegistryAddress(serviceRegisterAddress: string)
+bindProxy(): void
+staticallyBindProxy(serviceProviderAddress: string): void
#operator&lt;&lt;(parameter: int): ServiceProxy&amp;
#operator&lt;&lt;(parameter: double): ServiceProxy&amp;
#operator&lt;&lt;(parameter: string): ServiceProxy&amp;
#operator&lt;&lt;(parameter: ByteArray): ServiceProxy&amp;
#operator&lt;&lt;(parameter: Command): ServiceProxy&amp;
#operator&gt;&gt;(parameter: int): ServiceProxy&amp;
#operator&gt;&gt;(parameter: double): ServiceProxy&amp;
#operator&gt;&gt;(parameter: string): ServiceProxy&amp;
#operator&gt;&gt;(parameter: ByteArray): ServiceProxy&amp;
#operator&gt;&gt;(parameter: Command): ServiceProxy&amp;
-sendRequest(): void
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Class</type>
    <coordinates>
      <x>20</x>
      <y>490</y>
      <w>420</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>ParticularServiceProxy
--
+ParticularServiceProxy()
+operator()(parameter1: int, parameter2: double&amp;, ...): void
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Relation</type>
    <coordinates>
      <x>200</x>
      <y>410</y>
      <w>50</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>30;30;30;80</additional_attributes>
  </element>
  <element>
    <type>com.umlet.element.Note</type>
    <coordinates>
      <x>460</x>
      <y>30</y>
      <w>520</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>/_ServiceProxy_/
: lista dei parametri richiesti in input dal servizio
: lista dei parametri richiesti in output dal servizio
: signature del servizio
: indirizzo del Service Register
: indirizzo del Service Provider
: socket per la comunicazione
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Note</type>
    <coordinates>
      <x>460</x>
      <y>160</y>
      <w>520</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>: le classi derivate da ServiceProxy settano serviceID e registry di default
: in caso di default registry down, o se il client vuole usare un altro
: registry, questi metodi lo permettono.
: avvia il protocollo col registry per ottenere il serviceProviderAddress
: non volendo usare un registry, setta staticamente il serviceProviderAddr
: gli operatori &lt;&lt; e &gt;&gt; vengono utilizzati dalle classi derivate per riempire
: la lista dei parametri. Parametri di tipo Command permettono di eseguire
: azioni particolari (invio dei parametri e attesa della risposta, flushing
: dei parametri...)
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>com.umlet.element.Note</type>
    <coordinates>
      <x>460</x>
      <y>500</y>
      <w>460</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>_ParticularServiceProxy_
: passa al costruttore di classe base serviceId e registry di default
: il programmatore, utilizzando gli operatori &lt;&lt; (input) e &gt;&gt; (output),
: riempie la lista dei parametri da inviare, definendo al contempo
: quali sono di input e quali di output.
: La comunicazione viene avviata passando un opportuno oggetto
: di tipo Command
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
